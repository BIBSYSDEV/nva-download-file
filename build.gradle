plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.9.1'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'



allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
    targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

    def junit5Version = '5.6.0'
    def jacksonVersion = '2.10.3'
    def awsSdkVersion = '1.11.766'
    def zalandoVersion = '0.23.0'

    gradleLint.rules = ['unused-dependency']

    dependencies {
        implementation group: 'com.github.BIBSYSDEV', name: 'nva-datamodel-java', version: '0.10.1'
        implementation group: 'com.github.BIBSYSDEV', name: 'nva-commons', version: '0.5.2'

        implementation (group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4') {
            because('Required by build')
        }

        implementation group: 'io.mikael', name: 'urlbuilder', version: '2.0.9'

        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
        implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion) {
            because('Required by build')
        }

        implementation group: 'org.zalando', name: 'problem', version: zalandoVersion
        implementation group: 'org.zalando', name: 'jackson-datatype-problem', version: zalandoVersion

        implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: awsSdkVersion
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: awsSdkVersion
        implementation(group: 'com.amazonaws', name: 'aws-java-sdk-core', version: awsSdkVersion) {
            because('Required by build')
        }

        implementation ('org.apiguardian:apiguardian-api:1.0.0') {
            because('Required by build')
        }

        testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: '0.1.13'
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: junit5Version
        testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version) {
            because('Required by build')
        }
        testImplementation('org.hamcrest:hamcrest-core:1.3') {
            because('Required by build')
        }
        testCompile 'org.mockito:mockito-junit-jupiter:2.23.0'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging{
            events  'skipped','passed','failed'
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }
        }
    }
}

