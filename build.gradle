plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '17.3.0'
    id 'base'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

wrapper{
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '7.4.2'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'base'

    sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
    targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

    def junit5Version = '5.8.2'
    def jacksonVersion = '2.13.2'
    def awsSdkVersion = '1.12.220'
    def zalandoVersion = '0.27.1'
    def mockitoVersion = '4.5.1'
    def nvaCommonsVersion = '1.24.12'
    def hamcrestVersion = '2.2'
    def nvaFileModelVersion = '1.0.6'

    gradleLint.rules = ['unused-dependency']

    dependencies {
        implementation group: 'com.github.bibsysdev', name: 'nva-file-model', version: nvaFileModelVersion

        implementation group: 'com.github.bibsysdev', name: 'core', version: nvaCommonsVersion
        implementation group: 'com.github.bibsysdev', name: 'nvatestutils', version: nvaCommonsVersion
        implementation group: 'com.github.bibsysdev', name: 'apigateway', version: nvaCommonsVersion
        implementation group: 'com.github.bibsysdev', name: 'identifiers', version: nvaCommonsVersion
        implementation group: 'com.github.bibsysdev', name: 'json', version: nvaCommonsVersion

        implementation (group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4') {
            because('Required by build')
        }

        implementation group: 'io.mikael', name: 'urlbuilder', version: '2.0.9'

        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
        implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion) {
            because('Required by build')
        }

        implementation group: 'org.zalando', name: 'problem', version: zalandoVersion
        implementation group: 'org.zalando', name: 'jackson-datatype-problem', version: zalandoVersion

        implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: awsSdkVersion
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: awsSdkVersion
        implementation(group: 'com.amazonaws', name: 'aws-java-sdk-core', version: awsSdkVersion) {
            because('Required by build')
        }
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-kms', version: awsSdkVersion
        implementation ('org.apiguardian:apiguardian-api:1.1.2') {
            because('Required by build')
        }

        testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: junit5Version
        testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version) {
            because('Required by build')
        }

        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: hamcrestVersion
        testImplementation(group: 'org.hamcrest', name: 'hamcrest-core', version: hamcrestVersion) {
            because('Required by build')
        }
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging{
            events  'skipped','passed','failed'
        }
        environment 'ID_NAMESPACE', 'https://example.org/download-file'
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    check.dependsOn jacocoTestCoverageVerification

    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }
        }
    }
}

def getProjectList() {
    // These projects are considered. Replace with a different list as needed.
    subprojects + project
}

task jacocoMerge(type: JacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Merge the JaCoCo data files from all subprojects into one'
    project.afterEvaluate {  // do it at the end of the config phase to be sure all information is present
        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
        getProjectList().each { Project subproject ->
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                def testTasks = subproject.tasks.withType(Test)
                dependsOn(testTasks)   // ensure that .exec files are actually present

                testTasks.each { Test task ->
                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
                    if (extension != null) {
                        execFiles.from extension.getDestinationFile()
                    }
                }
            }
        }
        executionData = execFiles
    }
    doFirst {
        // .exec files might be missing if a project has no tests. Filter in execution phase.
        executionData = executionData.filter { it.canRead() }
    }
}

def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates an aggregate report from all subprojects'

    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
    executionData.from tasks.jacocoMerge.destinationFile

    project.afterEvaluate {
        // The JacocoReport tasks are the source of truth for class files and sources.
        def reportTasks = getReportTasks(tasks.jacocoRootReport)
        classDirectories.from project.files({
            reportTasks.collect {it.classDirectories}.findAll {it != null}
        })
        sourceDirectories.from project.files({
            reportTasks.collect {it.sourceDirectories}.findAll {it != null}
        })
    }

    reports {
        xml.enabled true
    }
}

build {
    dependsOn jacocoRootReport
}
