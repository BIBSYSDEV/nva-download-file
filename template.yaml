AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS
  Sample SAM Template for AWS

Globals:
  Function:
    Timeout: 20
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: download
  S3Bucket:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /NVA/PublicationData
    Description: S3 Bucket to access objects
  CognitoAuthorizationUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /NVA/CognitoUri

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
  NvaDownloadPublicationFileApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml
  NvaDownloadPublicationFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-presigned-download-url
      Handler: no.unit.nva.download.publication.file.CreatePresignedDownloadUrlHandler::handleRequest
      Runtime: java17
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_SCHEME: https
          API_HOST: !Sub api.${CustomDomain}
          SHORTENED_URI_TABLE_NAME: !Sub nva-url-shorterner-${AWS::StackName}
          BUCKET_NAME: !Ref S3Bucket
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
          COGNITO_HOST: !Ref CognitoAuthorizationUri
      Role: !GetAtt UploadExecutionRole.Arn
      Events:
        AuthorizedGetEvent:
          Type: Api
          Properties:
            Path: /{identifier}/files/{fileIdentifier}
            Method: get
            RestApiId: !Ref NvaDownloadPublicationFileApi
        AnonymousGetEvent:
          Type: Api
          Properties:
            Path: /public/{identifier}/files/{fileIdentifier}
            Method: get
            RestApiId: !Ref NvaDownloadPublicationFileApi

  NvaDownloadPublicationFileBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaDownloadPublicationFileApi
      Stage: !Ref NvaDownloadPublicationFileApi.Stage

  UploadExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - UrlShorteningMappings
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: manage-uploads
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
        - PolicyName: add-item-to-dynamo-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-url-shorterner-${AWS::StackName}

  #============================ URL shortener =========================================================================#
  # This solves the problem described here:
  # https://answers.microsoft.com/en-us/msoffice/forum/all/office-web-viewer-has-stopped-supporting-long-urls/232fdff6-adbf-44f9-be53-f475fde4ad3f
  #====================================================================================================================#

  UrlShorteningMappings:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub nva-url-shorterner-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: shortenedUri
          AttributeType: S
      KeySchema:
        - AttributeName: shortenedUri
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TimeToLiveSpecification:
        AttributeName: expiresDate
        Enabled: true


  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${NvaDownloadPublicationFileApi}/deployments'

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
  ApiGatewayCreateDeploymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt ApiGatewayCreateDeploymentLambdaRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse
          client = boto3.client('apigateway')
          def lambda_handler(event, context):
            responseData = {}
            responseStatus = cfnresponse.SUCCESS
            if event['RequestType'] == 'Update':
              try:
                properties = event['ResourceProperties']
                response = client.create_deployment(
                  restApiId=properties['RestApiId'],
                  stageName=properties['StageName'],
                  description='Deployed from Custom Resource'
                )
              except:
                responseStatus = cfnresponse.FAILED
            cfnresponse.send(event, context, responseStatus, responseData)

  ApiGatewayCreateDeploymentCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayCreateDeploymentLambda.Arn
      RestApiId: !Ref NvaDownloadPublicationFileApi
      StageName: !Ref NvaDownloadPublicationFileApi.Stage
      Timestamp: '${BUILD_TIMESTAMP}'
      AuthorizerArn: !Ref CognitoAuthorizerArn
