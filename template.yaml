AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS
  Sample SAM Template for AWS

Globals:
  Function:
    Timeout: 20
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: download
  S3Bucket:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /NVA/PublicationData
    Description: S3 Bucket to access objects
  CognitoAuthorizationUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /NVA/CognitoUri

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
  NvaDownloadPublicationFileApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: '2.0'
        info:
          title: NVA Download Publication File API
          version: '1.0'
        paths:
          /{identifier}/files/{fileIdentifier}:
            get:
              summary: Get a URI to fetch the requested file
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: ["https://api.nva.unit.no/scopes/frontend","aws.cognito.signin.user.admin"]
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication.
                - in: path
                  name: fileIdentifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication File.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDownloadPublicationFileFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/PreSignedUri'
                '400':
                  description: BAD REQUEST
                  schema:
                    $ref: '#/definitions/Problem'
                '401':
                  description: UNAUTHORIZED
                  schema:
                    $ref: '#/definitions/Problem'
                '500':
                  description: INTERNAL SERVER ERROR
                  schema:
                    $ref: '#/definitions/Problem'
                '503':
                  description: SERVICE UNAVAILABLE
                  schema:
                    $ref: '#/definitions/Problem'
          /public/{identifier}/files/{fileIdentifier}:
            get:
              summary: Get a URI to fetch the requested file
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication.
                - in: path
                  name: fileIdentifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication File.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDownloadPublicationFileFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/PreSignedUri'
                '400':
                  description: BAD REQUEST
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: NOT FOUND
                  schema:
                    $ref: '#/definitions/Problem'
                '500':
                  description: INTERNAL SERVER ERROR
                  schema:
                    $ref: '#/definitions/Problem'
                '503':
                  description: SERVICE UNAVAILABLE
                  schema:
                    $ref: '#/definitions/Problem'
        definitions:
          Problem:
              type: object
              description: NVA error reporting object
              required:
                - title
                - detail
                - status
              properties:
                title:
                  type: string
                  description: Human-readable description of the error status
                detail:
                  type: string
                  description: A more detailed error message describing the error and potential mitigations
                status:
                  type: integer
                  description: The HTTP status code associated with the problem
                requestId:
                  type: string
                  description: Identifier of the request causing the problem
                instance:
                  type: string
                  description: The requested path associated with the error
                type:
                  type: string
                  description: A URI describing the error and mitigations, in generic cases, this is about:blank
          PreSignedUri:
            type: object
            description: Details of downloadable file
            properties:
              id:
                type: string
                description: URI of downloadable publication
              expires:
                type: string
                description: DateTime for expiration of URI
        securityDefinitions:
          CognitoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !Ref CognitoAuthorizerArn
  NvaDownloadPublicationFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-presigned-download-url
      Handler: no.unit.nva.download.publication.file.CreatePresignedDownloadUrlHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_SCHEME: https
          API_HOST: !Sub api.${CustomDomain}
          BUCKET_NAME: !Ref S3Bucket
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
          COGNITO_HOST: !Ref CognitoAuthorizationUri
      Role: !GetAtt UploadExecutionRole.Arn
      Events:
        AuthorizedGetEvent:
          Type: Api
          Properties:
            Path: /{identifier}/files/{fileIdentifier}
            Method: get
            RestApiId: !Ref NvaDownloadPublicationFileApi
        AnonymousGetEvent:
          Type: Api
          Properties:
            Path: /public/{identifier}/files/{fileIdentifier}
            Method: get
            RestApiId: !Ref NvaDownloadPublicationFileApi

  NvaDownloadPublicationFileBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaDownloadPublicationFileApi
      Stage: !Ref NvaDownloadPublicationFileApi.Stage

  UploadExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: manage-uploads
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${NvaDownloadPublicationFileApi}/deployments'

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
  ApiGatewayCreateDeploymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt ApiGatewayCreateDeploymentLambdaRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse
          client = boto3.client('apigateway')
          def lambda_handler(event, context):
            responseData = {}
            responseStatus = cfnresponse.SUCCESS
            if event['RequestType'] == 'Update':
              try:
                properties = event['ResourceProperties']
                response = client.create_deployment(
                  restApiId=properties['RestApiId'],
                  stageName=properties['StageName'],
                  description='Deployed from Custom Resource'
                )
              except:
                responseStatus = cfnresponse.FAILED
            cfnresponse.send(event, context, responseStatus, responseData)
  ApiGatewayCreateDeploymentCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayCreateDeploymentLambda.Arn
      RestApiId: !Ref NvaDownloadPublicationFileApi
      StageName: !Ref NvaDownloadPublicationFileApi.Stage
      Timestamp: '${BUILD_TIMESTAMP}'
      AuthorizerArn: !Ref CognitoAuthorizerArn
